# -*- coding: utf-8 -*-
"""
Created on Sun May 06 16:52:35 2018
@author: admin
"""

# SETTING WORKING ENVIRONMENT

# Import Python packages

import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from  numpy import arange
from scipy.signal import welch
from scipy.interpolate import splrep, splev
from scipy.signal import argrelmax

 
# Indicate working directory, saving directory and data folder address

MyDir = 'C://Users/E/Desktop/Ewa/PYTON/YETI_OffCode'
SaveDir = MyDir
data_folder = './data/'
os.chdir(MyDir)
os.getcwd()

# Create collective variables for all participants

SUB_all = []   

YETI_AV_all = []
YETI_SD_all = []
FpMax_AV_all = []
FpMax_SD_all = []

YETI_sessions = []
FpMax_sessions = []


# LOADING DATA
             
for sub in sorted(os.listdir(data_folder)):

    SUB_all.append(sub)
    
    rr_data = []
    
    for fn in sorted(os.listdir(data_folder+sub)):
        rr = open(data_folder+sub+'/'+fn).read()
        rr = list(map(float, rr.split('\n')[:-1]))
        rr = np.array(rr)
        
         
# ARTIFFACT CORRECTION
        
        for i in range(len(rr[1:-2])):
            
            if rr[i] > 1300: 
                if rr[i+1] <= 1300:
                    rr[i] = (rr[i-1]+rr[i+2])/2
                else: 
                    if rr[i+2] <= 1300:
                        rr[i] = (rr[i-1]+rr[i+2])/2
                    else:
                        rr[i] = (rr[i-1]+rr[i+3])/2


# INTERPOLATION (FFT NEEDS EVENLY SAMPLED DATA)
                        
        t = np.cumsum(rr)/1000.0
        t -= t[0]
        tx = arange(t[0], t[-1], 1.0 / 4.0)
        tck = splrep(t, rr, s=0)
        rrix = splev(tx, tck, der=0)
        rrix = np.array(rrix)
        
        rr_data.append(rrix)
         
        #plt.plot(t,rr)
        #plt.xlabel('Time (sec)')
        #plt.ylabel('RR interval (ms)')
        #plt.show()

# FREQUENCY ANALYSIS    
    
    # Create variables for each participant
    
    YETI_sub = []
    FpMax_sub = []
    YETI_AV_sub = []
    FpMax_AV_sub = []
    YETI_SD_sub=[]
    FpMax_SD_sub = []
    
    fig, ax = plt.subplots()
              
    #Calculate the FFT spectrum
    
    def frequency_domain(rri, fs=4.0, vlf_band=(0, 0.04), lf_band=(0.04, 0.15), 
                         hf_band=(0.15, 0.4), rf_band=(0.052, 0.132)):
        
        fxx, pxx = welch(x=rri, fs=fs, noverlap=128)
        
        x, y = fxx[fxx<0.6], pxx[fxx<0.6]
        extrema = argrelmax(y, order=1000)
            
        ax.plot(x, y)
        ax.plot(x[extrema],y[extrema] , 'ro')
         
        peak = float(x[extrema])
               
        return _auc(fxx, pxx, vlf_band, lf_band, hf_band, rf_band, peak)
    
    
    def _auc(fxx, pxx, vlf_band, lf_band, hf_band, rf_band, peak):
        vlf_indexes = np.logical_and(fxx >= vlf_band[0], fxx < vlf_band[1])
        lf_indexes = np.logical_and(fxx >= lf_band[0], fxx < lf_band[1])
        hf_indexes = np.logical_and(fxx >= hf_band[0], fxx < hf_band[1])
        rf_indexes = np.logical_and(fxx >= rf_band[0], fxx <= rf_band[1])
    
        vlf = np.trapz(y=pxx[vlf_indexes], x=fxx[vlf_indexes])
        lf = np.trapz(y=pxx[lf_indexes], x=fxx[lf_indexes])
        hf = np.trapz(y=pxx[hf_indexes], x=fxx[hf_indexes])
        rf = np.trapz(y=pxx[rf_indexes], x=fxx[rf_indexes])
        
        total_power = vlf + lf + hf
        yeti = (rf / total_power)*100        
         
        YETI_sub.append(yeti)
        FpMax_sub.append(peak)
        
        return dict(zip(['total_power', 'rf','yeti', 'peak','vlf', 'lf', 'hf'], 
                        [total_power, rf, yeti, peak, vlf, lf, hf]))
     
        
    list(map(frequency_domain, rr_data))
    
    
    #Plot figures of all sessions for each participant
    
    ax.set_title(sub)
    fname='./plots/' + sub + '.svg'
    fig.savefig(fname)
    fig.show()
    
    # Calculate YETI_AV & YETI_SD for each participant and append to one dataframe
    
    YETI_AV_sub = np.mean(YETI_sub)
    YETI_SD_sub = np.std(YETI_sub)
    YETI_AV_all.append(YETI_AV_sub)
    YETI_SD_all.append(YETI_SD_sub)
    
    # Calculate FpMax_AV & FpMax_SD for each participant and append to one dataframe 
    
    FpMax_AV_sub = np.mean(FpMax_sub)
    FpMax_SD_sub = np.std(FpMax_sub)
    FpMax_AV_all.append(FpMax_AV_sub)
    FpMax_SD_all.append(FpMax_SD_sub)
    
    print (sub, 'YETI_AV',YETI_AV_sub, 'YETI_SD', YETI_SD_sub, 
           'FpMax_AV', FpMax_AV_sub, 'FpMax_SD', FpMax_SD_sub)
        
    # Collect all YETI and FpMax values for all sessions for each participant
    
    YETI_i = np.hstack(YETI_sub)
    YETI_sessions.append(YETI_i)
    FpMax_i=np.hstack(FpMax_sub)
    FpMax_sessions.append(FpMax_i)

    
# SAVING RESULTS
    
#Create & save data frames: 
#1. containing YETI_AV, YETI_SD, FpMax_AV and FpMax_SD of all participants
    
YETI_df = pd.DataFrame(data=SUB_all, columns=['ID'])
YETI_df=YETI_df.assign(YETI_AV=YETI_AV_all)
YETI_df=YETI_df.assign(YETI_SD=YETI_SD_all)
YETI_df=YETI_df.assign(FpMax_AV=FpMax_AV_all)
YETI_df=YETI_df.assign(FpMax_SD=FpMax_SD_all)
YETI_df.to_csv('./YETI_FpMax.csv')

#2. containing YETI and FpMax values from each session of all participants

sessions_df = pd.DataFrame(data=YETI_sessions, columns=['YETI'])
sessions_df = sessions_df.assign(FpMax=FpMax_sessions)
sessions_df.to_csv('./Session_data.csv')
