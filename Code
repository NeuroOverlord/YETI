# -*- coding: utf-8 -*-

# CAUTION! 
# Prior to calculating the YETI index clean your RR data with your favourite tool

# 1. SETTING THE WORKING ENVIRONMENT

# Import Python packages

import os
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from  numpy import arange
from scipy.signal import welch
from scipy.interpolate import splrep, splev
from scipy.signal import argrelmax


# Indicate your working directory, saving directory and data folder address

MyDir = 'C://Users/E/Desktop/Ewa/PYTON/YETI_OffCode'
SaveDir = MyDir
data_folder =  './corrected/'
plot_dir = './plots'

os.mkdir(plot_dir)
os.chdir(MyDir)
   

# Create collective variables for all participants

SUB_all = []   

YETI_AV_all = []
YETI_SD_all = []
fPmax_AV_all = []
fPmax_SD_all = []

YETI_sessions = []
fPmax_sessions = []


# Load artifact-free RR data
             
for sub in sorted(os.listdir(data_folder)):

    SUB_all.append(sub)
    
    rr_data = []
    
    for fn in sorted(os.listdir(data_folder+sub)):
        rr = open(data_folder+sub+'/'+fn).read()
        rr = list(map(float, rr.split('\n')[:-1]))
        rr = np.array(rr)
        
# Interpolate your data (FFT needs evenly sampled data)

        t = np.cumsum(rr)/1000.0
        t -= t[0]
        tx = arange(t[0], t[-1], 1.0 / 4.0)
        tck = splrep(t, rr, s=0)
        rrix = splev(tx, tck, der=0)
        rrix = np.array(rrix)   
        rr_data.append(rrix)


# 2. FREQUENCY ANALYSIS    
    
    # Create variables for each participant
    
    YETI_sub = []
    fPmax_sub = []
    YETI_AV_sub = []
    fPmax_AV_sub = []
    YETI_SD_sub=[]
    fPmax_SD_sub = []
    
    fig, ax = plt.subplots()
              
    # Calculate the FFT spectrum; vlf, lf and hf set at standard frequency; 
    # rf - resonance frequency, here set between 0.052 and 0.132 Hz
    
    def frequency_domain(rri, fs=4.0, vlf_band=(0, 0.04), lf_band=(0.04, 0.15), 
                         hf_band=(0.15, 0.4), rf_band=(0.052, 0.132)):
        
        fxx, pxx = welch(x=rri, fs=fs, noverlap=128)
        
        x, y = fxx[fxx<0.6], pxx[fxx<0.6]
        extrema = argrelmax(y, order=1000)
            
        ax.plot(x, y)
        ax.plot(x[extrema],y[extrema] , 'ro')
         
        peak = float(x[extrema])
               
        return _auc(fxx, pxx, vlf_band, lf_band, hf_band, rf_band, peak)
    
    # Calculate YETI, fPmax and standard HRV indices: total power, VLF, LF, HF 
    
    def _auc(fxx, pxx, vlf_band, lf_band, hf_band, rf_band, peak):
        vlf_indexes = np.logical_and(fxx >= vlf_band[0], fxx < vlf_band[1])
        lf_indexes = np.logical_and(fxx >= lf_band[0], fxx < lf_band[1])
        hf_indexes = np.logical_and(fxx >= hf_band[0], fxx < hf_band[1])
        rf_indexes = np.logical_and(fxx >= rf_band[0], fxx <= rf_band[1])
    
        vlf = np.trapz(y=pxx[vlf_indexes], x=fxx[vlf_indexes])
        lf = np.trapz(y=pxx[lf_indexes], x=fxx[lf_indexes])
        hf = np.trapz(y=pxx[hf_indexes], x=fxx[hf_indexes])
        rf = np.trapz(y=pxx[rf_indexes], x=fxx[rf_indexes])
        
        total_power = vlf + lf + hf
        yeti = (rf / total_power)*100        
         
        YETI_sub.append(yeti)
        fPmax_sub.append(peak)
        
        return dict(zip(['total_power', 'rf','yeti', 'peak','vlf', 'lf', 'hf'], 
                        [total_power, rf, yeti, peak, vlf, lf, hf]))
     
        
    list(map(frequency_domain, rr_data))
    
    
    #Plot figures of all sessions for each participant
    
    ax.set_title(sub)
    fname=plot_dir +'/' + sub + '.svg'
    fig.savefig(fname)
    fig.show()
    

# 3. CALCULATING STATS ON INDICES
    
    # Calculate YETI_AV & YETI_SD for each participant and append to one dataframe
    
    YETI_AV_sub = np.mean(YETI_sub)
    YETI_SD_sub = np.std(YETI_sub)
    YETI_AV_all.append(YETI_AV_sub)
    YETI_SD_all.append(YETI_SD_sub)
    
    # Calculate fPmax_AV & fPmax_SD for each participant and append to one dataframe 
    
    fPmax_AV_sub = np.mean(fPmax_sub)
    fPmax_SD_sub = np.std(fPmax_sub)
    fPmax_AV_all.append(fPmax_AV_sub)
    fPmax_SD_all.append(fPmax_SD_sub)
    
    print (sub, 'YETI_AV', YETI_AV_sub, 'YETI_SD', YETI_SD_sub, 
           'fPmax_AV', fPmax_AV_sub, 'fPmax_SD', fPmax_SD_sub)
        
    # Collect all YETI and fPmax values for all sessions for each participant
    
    YETI_i = np.hstack(YETI_sub)
    YETI_sessions.append(YETI_i)
    fPmax_i=np.hstack(fPmax_sub)
    fPmax_sessions.append(fPmax_i)

    
# 4. SAVING RESULTS

# Create & save data frames: 
# 1. containing YETI_AV, YETI_SD, fPmax_AV and fPmax_SD of all participants
    
YETI_df = pd.DataFrame(data=SUB_all, columns=['ID'])
YETI_df=YETI_df.assign(YETI_AV=YETI_AV_all)
YETI_df=YETI_df.assign(YETI_SD=YETI_SD_all)
YETI_df=YETI_df.assign(fPmax_AV=fPmax_AV_all)
YETI_df=YETI_df.assign(fPmax_SD=fPmax_SD_all)
YETI_df.to_csv('./YETI_fPmax.csv')

# 2. containing YETI and fPmax values from each session of all participants

sessions_YETI_df = pd.DataFrame(data=YETI_sessions, 
                                columns=['YETI_S1', 'YETI_S2', 'YETI_3', 'YETI_S4', 
                                         'YETI_S5', 'YETI_S6', 'YETI_S7', 'YETI_S8',
                                         'YETI_S9', 'YETI_S10', 'YETI_S11', 'YETI_S12', 
                                         'YETI_S13', 'YETI_S14', 'YETI_S15', 'YETI_S16', 
                                         'YETI_S17', 'YETI_S18', 'YETI_S19', 'YETI_S20'])
sessions_fPmax_df = pd.DataFrame(data=fPmax_sessions,
                                 columns=['fPmax_S1', 'fPmax_S2', 'fPmax_S3', 'fPmax_S4', 
                                         'fPmax_S5', 'fPmax_S6', 'fPmax_S7', 'fPmax_S8',
                                         'fPmax_S9', 'fPmax_S10', 'fPmax_S11', 'fPmax_S12', 
                                         'fPmax_S13', 'fPmax_S14', 'fPmax_S15', 'fPmax_S16', 
                                         'fPmax_S17', 'fPmax_S18', 'fPmax_S19', 'fPmax_S20'])
frames = [sessions_YETI_df, sessions_fPmax_df]
sessions_df = pd.concat(frames, axis=1)
sessions_df.to_csv('./Session_data.csv')
